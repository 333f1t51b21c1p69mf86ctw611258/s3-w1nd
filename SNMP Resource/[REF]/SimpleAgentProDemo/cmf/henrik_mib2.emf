StartOffSet 0000051268

%edes        sysDescr                A textual description of the entity.  This value\n                      should include the full name and version\n                      identification of the system's hardware type,\n                      software operating-system, and networking\n                      software.  It is mandatory that this only contain\n                      printable ASCII characters.
%edes        sysObjectID             The vendor's authoritative identification of the\n                      network management subsystem contained in the\n                      entity.  This value is allocated within the SMI\n                      enterprises subtree (1.3.6.1.4.1) and provides an\n                      easy and unambiguous means for determining `what\n                      kind of box' is being managed.  For example, if\n                      vendor `Flintstones, Inc.' was assigned the\n                      subtree 1.3.6.1.4.1.4242, it could assign the\n                      identifier 1.3.6.1.4.1.4242.1.1 to its `Fred\n                      Router'.
%edes        sysUpTime               The time (in hundredths of a second) since the\n                      network management portion of the system was last\n                      re-initialized.
%edes        sysContact              The textual identification of the contact person\n                      for this managed node, together with information\n                      on how to contact this person.
%edes        sysName                 An administratively-assigned name for this\n                      managed node.  By convention, this is the node's\n                      fully-qualified domain name.
%edes        sysLocation             The physical location of this node (e.g.,\n                      `telephone closet, 3rd floor').
%edes        sysServices             A value which indicates the set of services that\n                      this entity primarily offers.\n\n                      The value is a sum.  This sum initially takes the\n                      value zero, Then, for each layer, L, in the range\n                      1 through 7, that this node performs transactions\n                      for, 2 raised to (L - 1) is added to the sum.  For\n                      example, a node which performs primarily routing\n                      functions would have a value of 4 (2^(3-1)).  In\n                      contrast, a node which is a host offering\n                      application services would have a value of 72\n                      (2^(4-1) + 2^(7-1)).  Note that in the context of\n                      the Internet suite of protocols, values should be\n                      calculated accordingly:\n\n                           layer  functionality\n                               1  physical (e.g., repeaters)\n                               2  datalink/subnetwork (e.g., bridges)\n                               3  internet (e.g., IP gateways)\n                               4  end-to-end  (e.g., IP hosts)\n                               7  applications (e.g., mail relays)\n\n                      For systems including OSI protocols, layers 5 and\n                      6 may also be counted.
%edes        ifNumber                The number of network interfaces (regardless of\n                      their current state) present on this system.
%edes        ifTable                 A list of interface entries.  The number of\n                      entries is given by the value of ifNumber.
%edes        ifEntry                 An interface entry containing objects at the\n                      subnetwork layer and below for a particular\n                      interface.
%edes        ifIndex                 A unique value for each interface.  Its value\n                      ranges between 1 and the value of ifNumber.  The\n                      value for each interface must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization.
%edes        ifDescr                 A textual string containing information about the\n                      interface.  This string should include the name of\n                      the manufacturer, the product name and the version\n                      of the hardware interface.
%edes        ifType                  The type of interface, distinguished according to\n                      the physical/link protocol(s) immediately `below'\n                      the network layer in the protocol stack.
%edes        ifMtu                   The size of the largest datagram which can be\n                      sent/received on the interface, specified in\n                      octets.  For interfaces that are used for\n                      transmitting network datagrams, this is the size\n                      of the largest network datagram that can be sent\n                      on the interface.
%edes        ifSpeed                 An estimate of the interface's current bandwidth\n                      in bits per second.  For interfaces which do not\n                      vary in bandwidth or for those where no accurate\n                      estimation can be made, this object should contain\n                      the nominal bandwidth.
%edes        ifPhysAddress           The interface's address at the protocol layer\n                      immediately `below' the network layer in the\n                      protocol stack.  For interfaces which do not have\n                      such an address (e.g., a serial line), this object\n                      should contain an octet string of zero length.
%edes        ifAdminStatus           The desired state of the interface.  The\n                      testing(3) state indicates that no operational\n                      packets can be passed.
%edes        ifOperStatus            The current operational state of the interface.\n                      The testing(3) state indicates that no operational\n                      packets can be passed.
%edes        ifLastChange            The value of sysUpTime at the time the interface\n                      entered its current operational state.  If the\n                      current state was entered prior to the last re-\n                      initialization of the local network management\n                      subsystem, then this object contains a zero\n                      value.
%edes        ifInOctets              The total number of octets received on the\n                      interface, including framing characters.
%edes        ifInUcastPkts           The number of subnetwork-unicast packets\n                      delivered to a higher-layer protocol.
%edes        ifInNUcastPkts          The number of non-unicast (i.e., subnetwork-\n                      broadcast or subnetwork-multicast) packets\n                      delivered to a higher-layer protocol.
%edes        ifInDiscards            The number of inbound packets which were chosen\n                      to be discarded even though no errors had been\n                      detected to prevent their being deliverable to a\n                      higher-layer protocol.  One possible reason for\n                      discarding such a packet could be to free up\n                      buffer space.
%edes        ifInErrors              The number of inbound packets that contained\n                      errors preventing them from being deliverable to a\n                      higher-layer protocol.
%edes        ifInUnknownProtos       The number of packets received via the interface\n                      which were discarded because of an unknown or\n                      unsupported protocol.
%edes        ifOutOctets             The total number of octets transmitted out of the\n                      interface, including framing characters.
%edes        ifOutUcastPkts          The total number of packets that higher-level\n                      protocols requested be transmitted to a\n                      subnetwork-unicast address, including those that\n                      were discarded or not sent.
%edes        ifOutNUcastPkts         The total number of packets that higher-level\n                      protocols requested be transmitted to a non-\n                      unicast (i.e., a subnetwork-broadcast or\n                      subnetwork-multicast) address, including those\n                      that were discarded or not sent.
%edes        ifOutDiscards           The number of outbound packets which were chosen\n                      to be discarded even though no errors had been\n                      detected to prevent their being transmitted.  One\n                      possible reason for discarding such a packet could\n                      be to free up buffer space.
%edes        ifOutErrors             The number of outbound packets that could not be\n                      transmitted because of errors.
%edes        ifOutQLen               The length of the output packet queue (in\n                      packets).
%edes        ifSpecific              A reference to MIB definitions specific to the\n                      particular media being used to realize the\n                      interface.  For example, if the interface is\n                      realized by an ethernet, then the value of this\n                      object refers to a document defining objects\n                      specific to ethernet.  If this information is not\n                      present, its value should be set to the OBJECT\n                      IDENTIFIER { 0 0 }, which is a syntatically valid\n                      object identifier, and any conformant\n                      implementation of ASN.1 and BER must be able to\n                      generate and recognize this value.
%edes        atTable                 The Address Translation tables contain the\n                      NetworkAddress to `physical' address equivalences.\n                      Some interfaces do not use translation tables for\n                      determining address equivalences (e.g., DDN-X.25\n                      has an algorithmic method); if all interfaces are\n                      of this type, then the Address Translation table\n                      is empty, i.e., has zero entries.
%edes        atEntry                 Each entry contains one NetworkAddress to\n                      `physical' address equivalence.
%edes        atIfIndex               The interface on which this entry's equivalence\n                      is effective.  The interface identified by a\n                      particular value of this index is the same\n                      interface as identified by the same value of\n                      ifIndex.
%edes        atPhysAddress           The media-dependent `physical' address.\n\n                      Setting this object to a null string (one of zero\n                      length) has the effect of invaliding the\n                      corresponding entry in the atTable object.  That\n                      is, it effectively dissasociates the interface\n                      identified with said entry from the mapping\n                      identified with said entry.  It is an\n                      implementation-specific matter as to whether the\n                      agent removes an invalidated entry from the table.\n                      Accordingly, management stations must be prepared\n                      to receive tabular information from agents that\n                      corresponds to entries not currently in use.\n                      Proper interpretation of such entries requires\n                      examination of the relevant atPhysAddress object.
%edes        atNetAddress            The NetworkAddress (e.g., the IP address)\n                      corresponding to the media-dependent `physical'\n                      address.
%edes        ipForwarding            The indication of whether this entity is acting\n                      as an IP gateway in respect to the forwarding of\n                      datagrams received by, but not addressed to, this\n                      entity.  IP gateways forward datagrams.  IP hosts\n                      do not (except those source-routed via the host).\n\n                      Note that for some managed nodes, this object may\n                      take on only a subset of the values possible.\n                      Accordingly, it is appropriate for an agent to\n                      return a `badValue' response if a management\n                      station attempts to change this object to an\n                      inappropriate value.
%edes        ipDefaultTTL            The default value inserted into the Time-To-Live\n                      field of the IP header of datagrams originated at\n                      this entity, whenever a TTL value is not supplied\n                      by the transport layer protocol.
%edes        ipInReceives            The total number of input datagrams received from\n                      interfaces, including those received in error.
%edes        ipInHdrErrors           The number of input datagrams discarded due to\n                      errors in their IP headers, including bad\n                      checksums, version number mismatch, other format\n                      errors, time-to-live exceeded, errors discovered\n                      in processing their IP options, etc.
%edes        ipInAddrErrors          The number of input datagrams discarded because\n                      the IP address in their IP header's destination\n                      field was not a valid address to be received at\n                      this entity.  This count includes invalid\n                      addresses (e.g., 0.0.0.0) and addresses of\n                      unsupported Classes (e.g., Class E).  For entities\n                      which are not IP Gateways and therefore do not\n                      forward datagrams, this counter includes datagrams\n                      discarded because the destination address was not\n                      a local address.
%edes        ipForwDatagrams         The number of input datagrams for which this\n                      entity was not their final IP destination, as a\n                      result of which an attempt was made to find a\n                      route to forward them to that final destination.\n                      In entities which do not act as IP Gateways, this\n                      counter will include only those packets which were\n                      Source-Routed via this entity, and the Source-\n                      Route option processing was successful.
%edes        ipInUnknownProtos       The number of locally-addressed datagrams\n                      received successfully but discarded because of an\n                      unknown or unsupported protocol.
%edes        ipInDiscards            The number of input IP datagrams for which no\n                      problems were encountered to prevent their\n                      continued processing, but which were discarded\n                      (e.g., for lack of buffer space).  Note that this\n                      counter does not include any datagrams discarded\n                      while awaiting re-assembly.
%edes        ipInDelivers            The total number of input datagrams successfully\n                      delivered to IP user-protocols (including ICMP).
%edes        ipOutRequests           The total number of IP datagrams which local IP\n                      user-protocols (including ICMP) supplied to IP in\n                      requests for transmission.  Note that this counter\n                      does not include any datagrams counted in\n                      ipForwDatagrams.
%edes        ipOutDiscards           The number of output IP datagrams for which no\n                      problem was encountered to prevent their\n                      transmission to their destination, but which were\n                      discarded (e.g., for lack of buffer space).  Note\n                      that this counter would include datagrams counted\n                      in ipForwDatagrams if any such packets met this\n                      (discretionary) discard criterion.
%edes        ipOutNoRoutes           The number of IP datagrams discarded because no\n                      route could be found to transmit them to their\n                      destination.  Note that this counter includes any\n                      packets counted in ipForwDatagrams which meet this\n                      `no-route' criterion.  Note that this includes any\n                      datagarms which a host cannot route because all of\n                      its default gateways are down.
%edes        ipReasmTimeout          The maximum number of seconds which received\n                      fragments are held while they are awaiting\n                      reassembly at this entity.
%edes        ipReasmReqds            The number of IP fragments received which needed\n                      to be reassembled at this entity.
%edes        ipReasmOKs              The number of IP datagrams successfully re-\n                      assembled.
%edes        ipReasmFails            The number of failures detected by the IP re-\n                      assembly algorithm (for whatever reason: timed\n                      out, errors, etc).  Note that this is not\n                      necessarily a count of discarded IP fragments\n                      since some algorithms (notably the algorithm in\n                      RFC 815) can lose track of the number of fragments\n                      by combining them as they are received.
%edes        ipFragOKs               The number of IP datagrams that have been\n                      successfully fragmented at this entity.
%edes        ipFragFails             The number of IP datagrams that have been\n                      discarded because they needed to be fragmented at\n                      this entity but could not be, e.g., because their\n                      Don't Fragment flag was set.
%edes        ipFragCreates           The number of IP datagram fragments that have\n                      been generated as a result of fragmentation at\n                      this entity.
%edes        ipAddrTable             The table of addressing information relevant to\n                      this entity's IP addresses.
%edes        ipAddrEntry             The addressing information for one of this\n                      entity's IP addresses.
%edes        ipAdEntAddr             The IP address to which this entry's addressing\n                      information pertains.
%edes        ipAdEntIfIndex          The index value which uniquely identifies the\n                      interface to which this entry is applicable.  The\n                      interface identified by a particular value of this\n                      index is the same interface as identified by the\n                      same value of ifIndex.
%edes        ipAdEntNetMask          The subnet mask associated with the IP address of\n                      this entry.  The value of the mask is an IP\n                      address with all the network bits set to 1 and all\n                      the hosts bits set to 0.
%edes        ipAdEntBcastAddr        The value of the least-significant bit in the IP\n                      broadcast address used for sending datagrams on\n                      the (logical) interface associated with the IP\n                      address of this entry.  For example, when the\n                      Internet standard all-ones broadcast address is\n                      used, the value will be 1.  This value applies to\n                      both the subnet and network broadcasts addresses\n                      used by the entity on this (logical) interface.
%edes        ipAdEntReasmMaxSize     The size of the largest IP datagram which this\n                      entity can re-assemble from incoming IP fragmented\n                      datagrams received on this interface.
%edes        ipRouteTable            This entity's IP Routing table.
%edes        ipRouteEntry            A route to a particular destination.
%edes        ipRouteDest             The destination IP address of this route.  An\n                      entry with a value of 0.0.0.0 is considered a\n                      default route.  Multiple routes to a single\n                      destination can appear in the table, but access to\n                      such multiple entries is dependent on the table-\n                      access mechanisms defined by the network\n                      management protocol in use.
%edes        ipRouteIfIndex          The index value which uniquely identifies the\n                      local interface through which the next hop of this\n                      route should be reached.  The interface identified\n                      by a particular value of this index is the same\n                      interface as identified by the same value of\n                      ifIndex.
%edes        ipRouteMetric1          The primary routing metric for this route.  The\n                      semantics of this metric are determined by the\n                      routing-protocol specified in the route's\n                      ipRouteProto value.  If this metric is not used,\n                      its value should be set to -1.
%edes        ipRouteMetric2          An alternate routing metric for this route.  The\n                      semantics of this metric are determined by the\n                      routing-protocol specified in the route's\n                      ipRouteProto value.  If this metric is not used,\n                      its value should be set to -1.
%edes        ipRouteMetric3          An alternate routing metric for this route.  The\n                      semantics of this metric are determined by the\n                      routing-protocol specified in the route's\n                      ipRouteProto value.  If this metric is not used,\n                      its value should be set to -1.
%edes        ipRouteMetric4          An alternate routing metric for this route.  The\n                      semantics of this metric are determined by the\n                      routing-protocol specified in the route's\n                      ipRouteProto value.  If this metric is not used,\n                      its value should be set to -1.
%edes        ipRouteNextHop          The IP address of the next hop of this route.\n                      (In the case of a route bound to an interface\n                      which is realized via a broadcast media, the value\n                      of this field is the agent's IP address on that\n                      interface.)
%edes        ipRouteType             The type of route.  Note that the values\n                      direct(3) and indirect(4) refer to the notion of\n                      direct and indirect routing in the IP\n                      architecture.\n\n                      Setting this object to the value invalid(2) has\n                      the effect of invalidating the corresponding entry\n                      in the ipRouteTable object.  That is, it\n                      effectively dissasociates the destination\n                      identified with said entry from the route\n                      identified with said entry.  It is an\n                      implementation-specific matter as to whether the\n                      agent removes an invalidated entry from the table.\n                      Accordingly, management stations must be prepared\n                      to receive tabular information from agents that\n                      corresponds to entries not currently in use.\n                      Proper interpretation of such entries requires\n                      examination of the relevant ipRouteType object.
%edes        ipRouteProto            The routing mechanism via which this route was\n                      learned.  Inclusion of values for gateway routing\n                      protocols is not intended to imply that hosts\n                      should support those protocols.
%edes        ipRouteAge              The number of seconds since this route was last\n                      updated or otherwise determined to be correct.\n                      Note that no semantics of `too old' can be implied\n                      except through knowledge of the routing protocol\n                      by which the route was learned.
%edes        ipRouteMask             Indicate the mask to be logical-ANDed with the\n                      destination address before being compared to the\n                      value in the ipRouteDest field.  For those systems\n                      that do not support arbitrary subnet masks, an\n                      agent constructs the value of the ipRouteMask by\n                      determining whether the value of the correspondent\n                      ipRouteDest field belong to a class-A, B, or C\n                      network, and then using one of:\n\n                           mask           network\n                           255.0.0.0      class-A\n                           255.255.0.0    class-B\n                           255.255.255.0  class-C\n                      If the value of the ipRouteDest is 0.0.0.0 (a\n                      default route), then the mask value is also\n                      0.0.0.0.  It should be noted that all IP routing\n                      subsystems implicitly use this mechanism.
%edes        ipRouteMetric5          An alternate routing metric for this route.  The\n                      semantics of this metric are determined by the\n                      routing-protocol specified in the route's\n                      ipRouteProto value.  If this metric is not used,\n                      its value should be set to -1.
%edes        ipRouteInfo             A reference to MIB definitions specific to the\n                      particular routing protocol which is responsible\n                      for this route, as determined by the value\n                      specified in the route's ipRouteProto value.  If\n                      this information is not present, its value should\n                      be set to the OBJECT IDENTIFIER { 0 0 }, which is\n                      a syntatically valid object identifier, and any\n                      conformant implementation of ASN.1 and BER must be\n                      able to generate and recognize this value.
%edes        ipNetToMediaTable       The IP Address Translation table used for mapping\n                      from IP addresses to physical addresses.
%edes        ipNetToMediaEntry       Each entry contains one IpAddress to `physical'\n                      address equivalence.
%edes        ipNetToMediaIfIndex     The interface on which this entry's equivalence\n                      is effective.  The interface identified by a\n                      particular value of this index is the same\n                      interface as identified by the same value of\n                      ifIndex.
%edes        ipNetToMediaPhysAddress The media-dependent `physical' address.
%edes        ipNetToMediaNetAddress  The IpAddress corresponding to the media-\n                      dependent `physical' address.
%edes        ipNetToMediaType        The type of mapping.\n\n                      Setting this object to the value invalid(2) has\n                      the effect of invalidating the corresponding entry\n                      in the ipNetToMediaTable.  That is, it effectively\n                      dissasociates the interface identified with said\n                      entry from the mapping identified with said entry.\n                      It is an implementation-specific matter as to\n                      whether the agent removes an invalidated entry\n                      from the table.  Accordingly, management stations\n                      must be prepared to receive tabular information\n                      from agents that corresponds to entries not\n                      currently in use.  Proper interpretation of such\n                      entries requires examination of the relevant\n                      ipNetToMediaType object.
%edes        ipRoutingDiscards       The number of routing entries which were chosen\n                      to be discarded even though they are valid.  One\n                      possible reason for discarding such an entry could\n                      be to free-up buffer space for other routing\n                      entries.
%edes        icmpInMsgs              The total number of ICMP messages which the\n                      entity received.  Note that this counter includes\n                      all those counted by icmpInErrors.
%edes        icmpInErrors            The number of ICMP messages which the entity\n                      received but determined as having ICMP-specific\n                      errors (bad ICMP checksums, bad length, etc.).
%edes        icmpInDestUnreachs      The number of ICMP Destination Unreachable\n                      messages received.
%edes        icmpInTimeExcds         The number of ICMP Time Exceeded messages\n                      received.
%edes        icmpInParmProbs         The number of ICMP Parameter Problem messages\n                      received.
%edes        icmpInSrcQuenchs        The number of ICMP Source Quench messages\n                      received.
%edes        icmpInRedirects         The number of ICMP Redirect messages received.
%edes        icmpInEchos             The number of ICMP Echo (request) messages\n                      received.
%edes        icmpInEchoReps          The number of ICMP Echo Reply messages received.
%edes        icmpInTimestamps        The number of ICMP Timestamp (request) messages\n                      received.
%edes        icmpInTimestampReps     The number of ICMP Timestamp Reply messages\n                      received.
%edes        icmpInAddrMasks         The number of ICMP Address Mask Request messages\n                      received.
%edes        icmpInAddrMaskReps      The number of ICMP Address Mask Reply messages\n                      received.
%edes        icmpOutMsgs             The total number of ICMP messages which this\n                      entity attempted to send.  Note that this counter\n                      includes all those counted by icmpOutErrors.
%edes        icmpOutErrors           The number of ICMP messages which this entity did\n                      not send due to problems discovered within ICMP\n                      such as a lack of buffers.  This value should not\n                      include errors discovered outside the ICMP layer\n                      such as the inability of IP to route the resultant\n                      datagram.  In some implementations there may be no\n                      types of error which contribute to this counter's\n                      value.
%edes        icmpOutDestUnreachs     The number of ICMP Destination Unreachable\n                      messages sent.
%edes        icmpOutTimeExcds        The number of ICMP Time Exceeded messages sent.
%edes        icmpOutParmProbs        The number of ICMP Parameter Problem messages\n                      sent.
%edes        icmpOutSrcQuenchs       The number of ICMP Source Quench messages sent.
%edes        icmpOutRedirects        The number of ICMP Redirect messages sent.  For a\n                      host, this object will always be zero, since hosts\n                      do not send redirects.
%edes        icmpOutEchos            The number of ICMP Echo (request) messages sent.
%edes        icmpOutEchoReps         The number of ICMP Echo Reply messages sent.
%edes        icmpOutTimestamps       The number of ICMP Timestamp (request) messages\n                      sent.
%edes        icmpOutTimestampReps    The number of ICMP Timestamp Reply messages\n                      sent.
%edes        icmpOutAddrMasks        The number of ICMP Address Mask Request messages\n                      sent.
%edes        icmpOutAddrMaskReps     The number of ICMP Address Mask Reply messages\n                      sent.
%edes        tcpRtoAlgorithm         The algorithm used to determine the timeout value\n                      used for retransmitting unacknowledged octets.
%edes        tcpRtoMin               The minimum value permitted by a TCP\n                      implementation for the retransmission timeout,\n                      measured in milliseconds.  More refined semantics\n                      for objects of this type depend upon the algorithm\n                      used to determine the retransmission timeout.  In\n                      particular, when the timeout algorithm is rsre(3),\n                      an object of this type has the semantics of the\n                      LBOUND quantity described in RFC 793.
%edes        tcpRtoMax               The maximum value permitted by a TCP\n                      implementation for the retransmission timeout,\n                      measured in milliseconds.  More refined semantics\n                      for objects of this type depend upon the algorithm\n                      used to determine the retransmission timeout.  In\n                      particular, when the timeout algorithm is rsre(3),\n                      an object of this type has the semantics of the\n                      UBOUND quantity described in RFC 793.
%edes        tcpMaxConn              The limit on the total number of TCP connections\n                      the entity can support.  In entities where the\n                      maximum number of connections is dynamic, this\n                      object should contain the value -1.
%edes        tcpActiveOpens          The number of times TCP connections have made a\n                      direct transition to the SYN-SENT state from the\n                      CLOSED state.
%edes        tcpPassiveOpens         The number of times TCP connections have made a\n                      direct transition to the SYN-RCVD state from the\n                      LISTEN state.
%edes        tcpAttemptFails         The number of times TCP connections have made a\n                      direct transition to the CLOSED state from either\n                      the SYN-SENT state or the SYN-RCVD state, plus the\n                      number of times TCP connections have made a direct\n                      transition to the LISTEN state from the SYN-RCVD\n                      state.
%edes        tcpEstabResets          The number of times TCP connections have made a\n                      direct transition to the CLOSED state from either\n                      the ESTABLISHED state or the CLOSE-WAIT state.
%edes        tcpCurrEstab            The number of TCP connections for which the\n                      current state is either ESTABLISHED or CLOSE-\n                      WAIT.
%edes        tcpInSegs               The total number of segments received, including\n                      those received in error.  This count includes\n                      segments received on currently established\n                      connections.
%edes        tcpOutSegs              The total number of segments sent, including\n                      those on current connections but excluding those\n                      containing only retransmitted octets.
%edes        tcpRetransSegs          The total number of segments retransmitted - that\n                      is, the number of TCP segments transmitted\n                      containing one or more previously transmitted\n                      octets.
%edes        tcpConnTable            A table containing TCP connection-specific\n                      information.
%edes        tcpConnEntry            Information about a particular current TCP\n                      connection.  An object of this type is transient,\n                      in that it ceases to exist when (or soon after)\n                      the connection makes the transition to the CLOSED\n                      state.
%edes        tcpConnState            The state of this TCP connection.\n\n                      The only value which may be set by a management\n                      station is deleteTCB(12).  Accordingly, it is\n                      appropriate for an agent to return a `badValue'\n                      response if a management station attempts to set\n                      this object to any other value.\n\n                      If a management station sets this object to the\n                      value deleteTCB(12), then this has the effect of\n                      deleting the TCB (as defined in RFC 793) of the\n                      corresponding connection on the managed node,\n                      resulting in immediate termination of the\n                      connection.\n\n                      As an implementation-specific option, a RST\n                      segment may be sent from the managed node to the\n                      other TCP endpoint (note however that RST segments\n                      are not sent reliably).
%edes        tcpConnLocalAddress     The local IP address for this TCP connection.  In\n                      the case of a connection in the listen state which\n                      is willing to accept connections for any IP\n                      interface associated with the node, the value\n                      0.0.0.0 is used.
%edes        tcpConnLocalPort        The local port number for this TCP connection.
%edes        tcpConnRemAddress       The remote IP address for this TCP connection.
%edes        tcpConnRemPort          The remote port number for this TCP connection.
%edes        tcpInErrs               The total number of segments received in error\n                      (e.g., bad TCP checksums).
%edes        tcpOutRsts              The number of TCP segments sent containing the\n                      RST flag.
%edes        udpInDatagrams          The total number of UDP datagrams delivered to\n                      UDP users.
%edes        udpNoPorts              The total number of received UDP datagrams for\n                      which there was no application at the destination\n                      port.
%edes        udpInErrors             The number of received UDP datagrams that could\n                      not be delivered for reasons other than the lack\n                      of an application at the destination port.
%edes        udpOutDatagrams         The total number of UDP datagrams sent from this\n                      entity.
%edes        udpTable                A table containing UDP listener information.
%edes        udpEntry                Information about a particular current UDP\n                      listener.
%edes        udpLocalAddress         The local IP address for this UDP listener.  In\n                      the case of a UDP listener which is willing to\n                      accept datagrams for any IP interface associated\n                      with the node, the value 0.0.0.0 is used.
%edes        udpLocalPort            The local port number for this UDP listener.
%edes        egpInMsgs               The number of EGP messages received without\n                      error.
%edes        egpInErrors             The number of EGP messages received that proved\n                      to be in error.
%edes        egpOutMsgs              The total number of locally generated EGP\n                      messages.
%edes        egpOutErrors            The number of locally generated EGP messages not\n                      sent due to resource limitations within an EGP\n                      entity.
%edes        egpNeighTable           The EGP neighbor table.
%edes        egpNeighEntry           Information about this entity's relationship with\n                      a particular EGP neighbor.
%edes        egpNeighState           The EGP state of the local system with respect to\n                      this entry's EGP neighbor.  Each EGP state is\n                      represented by a value that is one greater than\n                      the numerical value associated with said state in\n                      RFC 904.
%edes        egpNeighAddr            The IP address of this entry's EGP neighbor.
%edes        egpNeighAs              The autonomous system of this EGP peer.  Zero\n                      should be specified if the autonomous system\n                      number of the neighbor is not yet known.
%edes        egpNeighInMsgs          The number of EGP messages received without error\n                      from this EGP peer.
%edes        egpNeighInErrs          The number of EGP messages received from this EGP\n                      peer that proved to be in error (e.g., bad EGP\n                      checksum).
%edes        egpNeighOutMsgs         The number of locally generated EGP messages to\n                      this EGP peer.
%edes        egpNeighOutErrs         The number of locally generated EGP messages not\n                      sent to this EGP peer due to resource limitations\n                      within an EGP entity.
%edes        egpNeighInErrMsgs       The number of EGP-defined error messages received\n                      from this EGP peer.
%edes        egpNeighOutErrMsgs      The number of EGP-defined error messages sent to\n                      this EGP peer.
%edes        egpNeighStateUps        The number of EGP state transitions to the UP\n                      state with this EGP peer.
%edes        egpNeighStateDowns      The number of EGP state transitions from the UP\n                      state to any other state with this EGP peer.
%edes        egpNeighIntervalHello   The interval between EGP Hello command\n                      retransmissions (in hundredths of a second).  This\n                      represents the t1 timer as defined in RFC 904.
%edes        egpNeighIntervalPoll    The interval between EGP poll command\n                      retransmissions (in hundredths of a second).  This\n                      represents the t3 timer as defined in RFC 904.
%edes        egpNeighMode            The polling mode of this EGP entity, either\n                      passive or active.
%edes        egpNeighEventTrigger    A control variable used to trigger operator-\n                      initiated Start and Stop events.  When read, this\n                      variable always returns the most recent value that\n                      egpNeighEventTrigger was set to.  If it has not\n                      been set since the last initialization of the\n                      network management subsystem on the node, it\n                      returns a value of `stop'.\n\n                      When set, this variable causes a Start or Stop\n                      event on the specified neighbor, as specified on\n                      pages 8-10 of RFC 904.  Briefly, a Start event\n                      causes an Idle peer to begin neighbor acquisition\n                      and a non-Idle peer to reinitiate neighbor\n                      acquisition.  A stop event causes a non-Idle peer\n                      to return to the Idle state until a Start event\n                      occurs, either via egpNeighEventTrigger or\n                      otherwise.
%edes        egpAs                   The autonomous system number of this EGP entity.
%edes        snmpInPkts              The total number of Messages delivered to the\n                      SNMP entity from the transport service.
%edes        snmpOutPkts             The total number of SNMP Messages which were\n                      passed from the SNMP protocol entity to the\n                      transport service.
%edes        snmpInBadVersions       The total number of SNMP Messages which were\n                      delivered to the SNMP protocol entity and were for\n                      an unsupported SNMP version.
%edes        snmpInBadCommunityNames The total number of SNMP Messages delivered to\n                      the SNMP protocol entity which used a SNMP\n                      community name not known to said entity.
%edes        snmpInBadCommunityUses  The total number of SNMP Messages delivered to\n                      the SNMP protocol entity which represented an SNMP\n                      operation which was not allowed by the SNMP\n                      community named in the Message.
%edes        snmpInASNParseErrs      The total number of ASN.1 or BER errors\n                      encountered by the SNMP protocol entity when\n                      decoding received SNMP Messages.
%edes        snmpInTooBigs           The total number of SNMP PDUs which were\n                      delivered to the SNMP protocol entity and for\n                      which the value of the error-status field is\n                      `tooBig'.
%edes        snmpInNoSuchNames       The total number of SNMP PDUs which were\n                      delivered to the SNMP protocol entity and for\n                      which the value of the error-status field is\n                      `noSuchName'.
%edes        snmpInBadValues         The total number of SNMP PDUs which were\n                      delivered to the SNMP protocol entity and for\n                      which the value of the error-status field is\n                      `badValue'.
%edes        snmpInReadOnlys         The total number valid SNMP PDUs which were\n                      delivered to the SNMP protocol entity and for\n                      which the value of the error-status field is\n                      `readOnly'.  It should be noted that it is a\n                      protocol error to generate an SNMP PDU which\n                      contains the value `readOnly' in the error-status\n                      field, as such this object is provided as a means\n                      of detecting incorrect implementations of the\n                      SNMP.
%edes        snmpInGenErrs           The total number of SNMP PDUs which were\n                      delivered to the SNMP protocol entity and for\n                      which the value of the error-status field is\n                      `genErr'.
%edes        snmpInTotalReqVars      The total number of MIB objects which have been\n                      retrieved successfully by the SNMP protocol entity\n                      as the result of receiving valid SNMP Get-Request\n                      and Get-Next PDUs.
%edes        snmpInTotalSetVars      The total number of MIB objects which have been\n                      altered successfully by the SNMP protocol entity\n                      as the result of receiving valid SNMP Set-Request\n                      PDUs.
%edes        snmpInGetRequests       The total number of SNMP Get-Request PDUs which\n                      have been accepted and processed by the SNMP\n                      protocol entity.
%edes        snmpInGetNexts          The total number of SNMP Get-Next PDUs which have\n                      been accepted and processed by the SNMP protocol\n                      entity.
%edes        snmpInSetRequests       The total number of SNMP Set-Request PDUs which\n                      have been accepted and processed by the SNMP\n                      protocol entity.
%edes        snmpInGetResponses      The total number of SNMP Get-Response PDUs which\n                      have been accepted and processed by the SNMP\n                      protocol entity.
%edes        snmpInTraps             The total number of SNMP Trap PDUs which have\n                      been accepted and processed by the SNMP protocol\n                      entity.
%edes        snmpOutTooBigs          The total number of SNMP PDUs which were\n                      generated by the SNMP protocol entity and for\n                      which the value of the error-status field is\n                      `tooBig.'
%edes        snmpOutNoSuchNames      The total number of SNMP PDUs which were\n                      generated by the SNMP protocol entity and for\n                      which the value of the error-status is\n                      `noSuchName'.
%edes        snmpOutBadValues        The total number of SNMP PDUs which were\n                      generated by the SNMP protocol entity and for\n                      which the value of the error-status field is\n                      `badValue'.
%edes        snmpOutGenErrs          The total number of SNMP PDUs which were\n                      generated by the SNMP protocol entity and for\n                      which the value of the error-status field is\n                      `genErr'.
%edes        snmpOutGetRequests      The total number of SNMP Get-Request PDUs which\n                      have been generated by the SNMP protocol entity.
%edes        snmpOutGetNexts         The total number of SNMP Get-Next PDUs which have\n                      been generated by the SNMP protocol entity.
%edes        snmpOutSetRequests      The total number of SNMP Set-Request PDUs which\n                      have been generated by the SNMP protocol entity.
%edes        snmpOutGetResponses     The total number of SNMP Get-Response PDUs which\n                      have been generated by the SNMP protocol entity.
%edes        snmpOutTraps            The total number of SNMP Trap PDUs which have\n                      been generated by the SNMP protocol entity.
%edes        snmpEnableAuthenTraps   Indicates whether the SNMP agent process is\n                      permitted to generate authentication-failure\n                      traps.  The value of this object overrides any\n                      configuration information; as such, it provides a\n                      means whereby all authentication-failure traps may\n                      be disabled.\n\n                      Note that it is strongly recommended that this\n                      object be stored in non-volatile memory so that it\n                      remains constant between re-initializations of the\n                      network management system.
sysDescr                25
sysObjectID             435
sysUpTime               1115
sysContact              1313
sysName                 1527
sysLocation             1733
sysServices             1869
ifNumber                3277
ifTable                 3432
ifEntry                 3581
ifIndex                 3766
ifDescr                 4171
ifType                  4458
ifMtu                   4684
ifSpeed                 5087
ifPhysAddress           5439
ifAdminStatus           5809
ifOperStatus            6005
ifLastChange            6212
ifInOctets              6608
ifInUcastPkts           6754
ifInNUcastPkts          6895
ifInDiscards            7106
ifInErrors              7511
ifInUnknownProtos       7715
ifOutOctets             7917
ifOutUcastPkts          8070
ifOutNUcastPkts         8341
ifOutDiscards           8684
ifOutErrors             9040
ifOutQLen               9182
ifSpecific              9296
atTable                 10061
atEntry                 10564
atIfIndex               10700
atPhysAddress           11021
atNetAddress            12010
ipForwarding            12194
ipDefaultTTL            12966
ipInReceives            13256
ipInHdrErrors           13415
ipInAddrErrors          13770
ipForwDatagrams         14461
ipInUnknownProtos       15037
ipInDiscards            15247
ipInDelivers            15664
ipOutRequests           15824
ipOutDiscards           16163
ipOutNoRoutes           16661
ipReasmTimeout          17167
ipReasmReqds            17367
ipReasmOKs              17512
ipReasmFails            17629
ipFragOKs               18126
ipFragFails             18270
ipFragCreates           18549
ipAddrTable             18740
ipAddrEntry             18878
ipAdEntAddr             19006
ipAdEntIfIndex          19138
ipAdEntNetMask          19488
ipAdEntBcastAddr        19766
ipAdEntReasmMaxSize     20351
ipRouteTable            20572
ipRouteEntry            20643
ipRouteDest             20719
ipRouteIfIndex          21201
ipRouteMetric1          21605
ipRouteMetric2          21953
ipRouteMetric3          22302
ipRouteMetric4          22651
ipRouteNextHop          23000
ipRouteType             23334
ipRouteProto            24485
ipRouteAge              24768
ipRouteMask             25126
ipRouteMetric5          26178
ipRouteInfo             26527
ipNetToMediaTable       27180
ipNetToMediaEntry       27333
ipNetToMediaIfIndex     27464
ipNetToMediaPhysAddress 27785
ipNetToMediaNetAddress  27864
ipNetToMediaType        27998
ipRoutingDiscards       28963
icmpInMsgs              29296
icmpInErrors            29510
icmpInDestUnreachs      29735
icmpInTimeExcds         29859
icmpInParmProbs         29973
icmpInSrcQuenchs        30091
icmpInRedirects         30205
icmpInEchos             30291
icmpInEchoReps          30406
icmpInTimestamps        30494
icmpInTimestampReps     30614
icmpInAddrMasks         30730
icmpInAddrMaskReps      30851
icmpOutMsgs             30970
icmpOutErrors           31195
icmpOutDestUnreachs     31751
icmpOutTimeExcds        31871
icmpOutParmProbs        31958
icmpOutSrcQuenchs       32072
icmpOutRedirects        32159
icmpOutEchos            32368
icmpOutEchoReps         32456
icmpOutTimestamps       32540
icmpOutTimestampReps    32656
icmpOutAddrMasks        32768
icmpOutAddrMaskReps     32885
tcpRtoAlgorithm         33000
tcpRtoMin               33159
tcpRtoMax               33731
tcpMaxConn              34303
tcpActiveOpens          34590
tcpPassiveOpens         34786
tcpAttemptFails         34982
tcpEstabResets          35392
tcpCurrEstab            35622
tcpInSegs               35803
tcpOutSegs              36062
tcpRetransSegs          36279
tcpConnTable            36534
tcpConnEntry            36652
tcpConnState            36981
tcpConnLocalAddress     38041
tcpConnLocalPort        38380
tcpConnRemAddress       38466
tcpConnRemPort          38552
tcpInErrs               38639
tcpOutRsts              38775
udpInDatagrams          38894
udpNoPorts              39014
udpInErrors             39202
udpOutDatagrams         39427
udpTable                39546
udpEntry                39630
udpLocalAddress         39745
udpLocalPort            40039
egpInMsgs               40123
egpInErrors             40236
egpOutMsgs              40362
egpOutErrors            40476
egpNeighTable           40665
egpNeighEntry           40728
egpNeighState           40867
egpNeighAddr            41201
egpNeighAs              41285
egpNeighInMsgs          41502
egpNeighInErrs          41634
egpNeighOutMsgs         41827
egpNeighOutErrs         41952
egpNeighInErrMsgs       42158
egpNeighOutErrMsgs      42290
egpNeighStateUps        42416
egpNeighStateDowns      42550
egpNeighIntervalHello   42705
egpNeighIntervalPoll    42927
egpNeighMode            43148
egpNeighEventTrigger    43273
egpAs                   44359
snmpInPkts              44447
snmpOutPkts             44595
snmpInBadVersions       44788
snmpInBadCommunityNames 44998
snmpInBadCommunityUses  45214
snmpInASNParseErrs      45496
snmpInTooBigs           45699
snmpInNoSuchNames       45949
snmpInBadValues         46203
snmpInReadOnlys         46455
snmpInGenErrs           47055
snmpInTotalReqVars      47305
snmpInTotalSetVars      47581
snmpInGetRequests       47842
snmpInGetNexts          48037
snmpInSetRequests       48229
snmpInGetResponses      48424
snmpInTraps             48620
snmpOutTooBigs          48808
snmpOutNoSuchNames      49058
snmpOutBadValues        49306
snmpOutGenErrs          49558
snmpOutGetRequests      49808
snmpOutGetNexts         49967
snmpOutSetRequests      50123
snmpOutGetResponses     50282
snmpOutTraps            50442
snmpEnableAuthenTraps   50594
